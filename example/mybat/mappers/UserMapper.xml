<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 用户映射器XML配置文件 -->
<mapper namespace="UserMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="User">
        <id column="id" property="ID" jdbcType="BIGINT"/>
        <result column="name" property="Name" jdbcType="VARCHAR"/>
        <result column="email" property="Email" jdbcType="VARCHAR"/>
        <result column="age" property="Age" jdbcType="INTEGER"/>
        <result column="status" property="Status" jdbcType="VARCHAR"/>
        <result column="avatar" property="Avatar" jdbcType="VARCHAR"/>
        <result column="phone" property="Phone" jdbcType="VARCHAR"/>
        <result column="birthday" property="Birthday" jdbcType="DATE"/>
        <result column="created_at" property="CreatedAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="UpdatedAt" jdbcType="TIMESTAMP"/>
        <result column="deleted_at" property="DeletedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 用户档案结果映射 -->
    <resultMap id="UserWithProfileResultMap" type="ComplexQueryResult">
        <id column="user_id" property="User.ID" jdbcType="BIGINT"/>
        <result column="user_name" property="User.Name" jdbcType="VARCHAR"/>
        <result column="user_email" property="User.Email" jdbcType="VARCHAR"/>
        <result column="user_age" property="User.Age" jdbcType="INTEGER"/>
        <result column="user_status" property="User.Status" jdbcType="VARCHAR"/>
        <association property="Profile" javaType="UserProfile">
            <id column="profile_user_id" property="UserID" jdbcType="BIGINT"/>
            <result column="bio" property="Bio" jdbcType="VARCHAR"/>
            <result column="website" property="Website" jdbcType="VARCHAR"/>
            <result column="location" property="Location" jdbcType="VARCHAR"/>
            <result column="company" property="Company" jdbcType="VARCHAR"/>
            <result column="occupation" property="Occupation" jdbcType="VARCHAR"/>
            <result column="education" property="Education" jdbcType="VARCHAR"/>
            <result column="skills" property="Skills" jdbcType="TEXT"/>
            <result column="preferences" property="Preferences" jdbcType="TEXT"/>
        </association>
    </resultMap>

    <!-- 用户角色结果映射 -->
    <resultMap id="UserWithRolesResultMap" type="ComplexQueryResult">
        <id column="user_id" property="User.ID" jdbcType="BIGINT"/>
        <result column="user_name" property="User.Name" jdbcType="VARCHAR"/>
        <result column="user_email" property="User.Email" jdbcType="VARCHAR"/>
        <collection property="Roles" ofType="UserRole">
            <id column="role_id" property="ID" jdbcType="BIGINT"/>
            <result column="role_user_id" property="UserID" jdbcType="BIGINT"/>
            <result column="role_name" property="RoleName" jdbcType="VARCHAR"/>
            <result column="permissions" property="Permissions" jdbcType="TEXT"/>
        </collection>
    </resultMap>

    <!-- SQL片段定义 -->
    <sql id="Base_Column_List">
        id, name, email, age, status, avatar, phone, birthday, created_at, updated_at, deleted_at
    </sql>

    <sql id="Base_Where_Clause">
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="email != null and email != ''">  
                AND email = #{email}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="phone != null and phone != ''">
                AND phone = #{phone}
            </if>
            <if test="ageMin != null and ageMin > 0">
                AND age >= #{ageMin}
            </if>
            <if test="ageMax != null and ageMax > 0">
                AND age <= #{ageMax}
            </if>
            <if test="createdAfter != null">
                AND created_at >= #{createdAfter}
            </if>
            <if test="createdBefore != null">
                AND created_at <= #{createdBefore}
            </if>
            <if test="keyword != null and keyword != ''">
                AND (name LIKE CONCAT('%', #{keyword}, '%') 
                     OR email LIKE CONCAT('%', #{keyword}, '%')
                     OR phone LIKE CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="!includeDeleted">
                AND deleted_at IS NULL
            </if>
            <if test="onlyActive">
                AND status = 'active'
            </if>
        </where>
    </sql>

    <!-- ========== 基础CRUD操作 ========== -->

    <!-- 根据ID查询用户 -->
    <select id="selectById" parameterType="long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users
        WHERE id = #{id} AND deleted_at IS NULL
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectByEmail" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users  
        WHERE email = #{email} AND deleted_at IS NULL
    </select>

    <!-- 根据ID列表查询用户 -->
    <select id="selectByIds" parameterType="list" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted_at IS NULL
        ORDER BY id
    </select>

    <!-- 插入用户 -->
    <insert id="insert" parameterType="User" useGeneratedKeys="true" keyProperty="ID">
        INSERT INTO users (name, email, age, status, avatar, phone, birthday, created_at, updated_at)
        VALUES (#{Name}, #{Email}, #{Age}, #{Status}, #{Avatar}, #{Phone}, #{Birthday}, NOW(), NOW())
    </insert>

    <!-- 更新用户 -->
    <update id="update" parameterType="User">
        UPDATE users
        SET name = #{Name},
            email = #{Email},
            age = #{Age},
            status = #{Status},
            avatar = #{Avatar},
            phone = #{Phone},
            birthday = #{Birthday},
            updated_at = NOW()
        WHERE id = #{ID}
    </update>

    <!-- 软删除用户 -->
    <update id="delete" parameterType="long">
        UPDATE users
        SET deleted_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 物理删除用户 -->
    <delete id="physicalDelete" parameterType="long">
        DELETE FROM users WHERE id = #{id}
    </delete>

    <!-- ========== 动态SQL查询 ========== -->

    <!-- 动态条件查询用户列表 -->
    <select id="selectList" parameterType="UserQuery" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users
        <include refid="Base_Where_Clause" />
        <choose>
            <when test="orderBy != null and orderBy != ''">
                ORDER BY ${orderBy}
                <if test="orderDesc">DESC</if>
                <if test="!orderDesc">ASC</if>
            </when>
            <otherwise>
                ORDER BY created_at DESC
            </otherwise>
        </choose>
        <if test="pageSize != null and pageSize > 0">
            LIMIT #{pageSize}
            <if test="offset != null and offset > 0">
                OFFSET #{offset}
            </if>
        </if>
    </select>

    <!-- 动态条件统计用户数量 -->
    <select id="selectCount" parameterType="UserQuery" resultType="long">
        SELECT COUNT(*)
        FROM users
        <include refid="Base_Where_Clause" />
    </select>

    <!-- 选择性更新用户 -->
    <update id="updateSelective" parameterType="User">
        UPDATE users
        <set>
            <if test="Name != null and Name != ''">
                name = #{Name},
            </if>
            <if test="Email != null and Email != ''">
                email = #{Email},
            </if>
            <if test="Age != null and Age > 0">
                age = #{Age},
            </if>
            <if test="Status != null and Status != ''">
                status = #{Status},
            </if>
            <if test="Avatar != null">
                avatar = #{Avatar},
            </if>
            <if test="Phone != null">
                phone = #{Phone},
            </if>
            <if test="Birthday != null">
                birthday = #{Birthday},
            </if>
            updated_at = NOW()
        </set>
        WHERE id = #{ID}
    </update>

    <!-- ========== 批量操作 ========== -->

    <!-- 批量插入用户 -->
    <insert id="batchInsert" parameterType="list">
        INSERT INTO users (name, email, age, status, avatar, phone, birthday, created_at, updated_at)
        VALUES
        <foreach collection="users" item="user" separator=",">
            (#{user.Name}, #{user.Email}, #{user.Age}, #{user.Status}, 
             #{user.Avatar}, #{user.Phone}, #{user.Birthday}, NOW(), NOW())
        </foreach>
    </insert>

    <!-- 批量更新用户状态 -->
    <update id="batchUpdateStatus" parameterType="map">
        UPDATE users
        SET status = #{status}, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 批量删除用户 -->
    <update id="batchDelete" parameterType="list">
        UPDATE users
        SET deleted_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- ========== 聚合查询 ========== -->

    <!-- 查询用户统计信息 -->
    <select id="selectStats" resultType="UserStats">
        SELECT 
            COUNT(*) as totalUsers,
            COUNT(CASE WHEN status = 'active' THEN 1 END) as activeUsers,
            COUNT(CASE WHEN created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 1 END) as recentUsers
        FROM users
        WHERE deleted_at IS NULL
    </select>

    <!-- 按状态分组统计 -->
    <select id="selectByStatus" resultType="AggregationResult">
        SELECT 
            status as field,
            status as value,
            COUNT(*) as count
        FROM users
        WHERE deleted_at IS NULL
        GROUP BY status
        ORDER BY count DESC
    </select>

    <!-- 按年龄组分组统计 -->
    <select id="selectByAgeGroup" resultType="AggregationResult">
        SELECT 
            CASE 
                WHEN age &lt; 18 THEN 'under_18'
                WHEN age BETWEEN 18 AND 25 THEN '18_25'
                WHEN age BETWEEN 26 AND 35 THEN '26_35'
                WHEN age BETWEEN 36 AND 50 THEN '36_50'
                ELSE 'over_50'
            END as field,
            CASE 
                WHEN age &lt; 18 THEN 'under_18'
                WHEN age BETWEEN 18 AND 25 THEN '18_25'
                WHEN age BETWEEN 26 AND 35 THEN '26_35'
                WHEN age BETWEEN 36 AND 50 THEN '36_50'
                ELSE 'over_50'
            END as value,
            COUNT(*) as count
        FROM users
        WHERE deleted_at IS NULL
        GROUP BY 
            CASE 
                WHEN age &lt; 18 THEN 'under_18'
                WHEN age BETWEEN 18 AND 25 THEN '18_25'
                WHEN age BETWEEN 26 AND 35 THEN '26_35'
                WHEN age BETWEEN 36 AND 50 THEN '36_50'
                ELSE 'over_50'
            END
        ORDER BY count DESC
    </select>

    <!-- 查询指定时间段内的活跃用户 -->
    <select id="selectActiveUsersInPeriod" parameterType="map" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users
        WHERE status = 'active'
          AND deleted_at IS NULL
          AND created_at BETWEEN #{startTime} AND #{endTime}
        ORDER BY created_at DESC
    </select>

    <!-- ========== 复杂查询 ========== -->

    <!-- 查询用户及其档案信息 -->
    <select id="selectWithProfile" parameterType="long" resultMap="UserWithProfileResultMap">
        SELECT 
            u.id as user_id, u.name as user_name, u.email as user_email, u.age as user_age, u.status as user_status,
            u.avatar, u.phone, u.birthday, u.created_at, u.updated_at, u.deleted_at,
            p.user_id as profile_user_id, p.bio, p.website, p.location, p.company, p.occupation, 
            p.education, p.skills, p.preferences
        FROM users u
        LEFT JOIN user_profiles p ON u.id = p.user_id
        WHERE u.id = #{id} AND u.deleted_at IS NULL
    </select>

    <!-- 查询用户及其角色信息 -->
    <select id="selectWithRoles" parameterType="long" resultMap="UserWithRolesResultMap">
        SELECT 
            u.id as user_id, u.name as user_name, u.email as user_email, u.age as user_age, u.status as user_status,
            u.avatar, u.phone, u.birthday, u.created_at, u.updated_at, u.deleted_at,
            r.id as role_id, r.user_id as role_user_id, r.role_name, r.permissions
        FROM users u
        LEFT JOIN user_roles r ON u.id = r.user_id
        WHERE u.id = #{id} AND u.deleted_at IS NULL
    </select>

    <!-- 查询用户及其文章 -->
    <select id="selectWithArticles" parameterType="map" resultType="ComplexQueryResult">
        SELECT 
            u.id, u.name, u.email, u.age, u.status, u.avatar, u.phone, u.birthday,
            u.created_at, u.updated_at, u.deleted_at,
            a.id as article_id, a.title, a.summary, a.status as article_status,
            a.view_count, a.like_count, a.comment_count, a.published_at
        FROM users u
        LEFT JOIN articles a ON u.id = a.author_id AND a.deleted_at IS NULL
        WHERE u.id = #{userId} AND u.deleted_at IS NULL
        ORDER BY a.created_at DESC
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 全文搜索用户 -->
    <select id="searchUsers" parameterType="map" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />,
               MATCH(name, email) AGAINST(#{keyword}) as relevance
        FROM users
        WHERE deleted_at IS NULL
          AND (MATCH(name, email) AGAINST(#{keyword})
               OR name LIKE CONCAT('%', #{keyword}, '%')
               OR email LIKE CONCAT('%', #{keyword}, '%')
               OR phone LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY relevance DESC, created_at DESC
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 查询相似用户 -->
    <select id="selectSimilarUsers" parameterType="map" resultMap="BaseResultMap">
        SELECT u2.id, u2.name, u2.email, u2.age, u2.status, u2.avatar, u2.phone, u2.birthday,
               u2.created_at, u2.updated_at, u2.deleted_at
        FROM users u1
        JOIN users u2 ON u1.id != u2.id 
          AND ABS(u1.age - u2.age) &lt;= 5 
          AND u1.status = u2.status
        WHERE u1.id = #{userId} 
          AND u1.deleted_at IS NULL 
          AND u2.deleted_at IS NULL
        ORDER BY ABS(u1.age - u2.age), u2.created_at DESC
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- ========== 特殊查询 ========== -->

    <!-- 随机查询用户 -->
    <select id="selectRandomUsers" parameterType="map" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users
        WHERE deleted_at IS NULL AND status = 'active'
        ORDER BY RAND()
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 查询最活跃用户 -->
    <select id="selectTopActiveUsers" parameterType="map" resultType="User">
        SELECT u.id, u.name, u.email, u.age, u.status, u.avatar, u.phone, u.birthday,
               u.created_at, u.updated_at, u.deleted_at,
               COUNT(a.id) as article_count
        FROM users u
        LEFT JOIN articles a ON u.id = a.author_id AND a.deleted_at IS NULL
        WHERE u.deleted_at IS NULL AND u.status = 'active'
        GROUP BY u.id, u.name, u.email, u.age, u.status, u.avatar, u.phone, u.birthday,
                 u.created_at, u.updated_at, u.deleted_at
        ORDER BY article_count DESC, u.created_at DESC
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 查询没有档案信息的用户 -->
    <select id="selectUsersWithoutProfile" resultMap="BaseResultMap">
        SELECT u.id, u.name, u.email, u.age, u.status, u.avatar, u.phone, u.birthday,
               u.created_at, u.updated_at, u.deleted_at
        FROM users u
        LEFT JOIN user_profiles p ON u.id = p.user_id
        WHERE u.deleted_at IS NULL AND p.user_id IS NULL
        ORDER BY u.created_at DESC
    </select>

    <!-- 查询最近注册的用户 -->
    <select id="selectRecentRegistrations" parameterType="map" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users
        WHERE deleted_at IS NULL 
          AND created_at >= DATE_SUB(NOW(), INTERVAL #{days} DAY)
        ORDER BY created_at DESC
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- ========== 存储过程和函数 ========== -->

    <!-- 调用用户统计存储过程 -->
    <select id="callUserStatsProcedure" parameterType="map" statementType="CALLABLE" resultType="UserStats">
        {CALL GetUserStats(#{startDate,jdbcType=DATE}, #{endDate,jdbcType=DATE})}
    </select>

    <!-- 使用自定义函数查询 -->
    <select id="selectUserByCustomFunction" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM users
        WHERE deleted_at IS NULL 
          AND id = GetUsersByCustomFunction(#{param})
        ORDER BY created_at DESC
    </select>

</mapper>