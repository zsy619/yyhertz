package codegen

import (
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// ClientGenerator 客户端代码生成器
type ClientGenerator struct {
	ProjectRoot string
	OutputDir   string
	PackageName string
	BaseURL     string
}

// ClientConfig 客户端配置
type ClientConfig struct {
	PackageName string
	BaseURL     string
	Controllers []ControllerInfo
}

// NewClientGenerator 创建客户端生成器
func NewClientGenerator(projectRoot string) *ClientGenerator {
	return &ClientGenerator{
		ProjectRoot: projectRoot,
		OutputDir:   "client",
		PackageName: "client",
		BaseURL:     "http://localhost:8080",
	}
}

// Generate 生成客户端代码
func (cg *ClientGenerator) Generate(controllers []ControllerInfo) error {
	config := ClientConfig{
		PackageName: cg.PackageName,
		BaseURL:     cg.BaseURL,
		Controllers: controllers,
	}

	// 生成基础客户端
	if err := cg.generateBaseClient(config); err != nil {
		return err
	}

	// 生成控制器客户端
	for _, ctrl := range controllers {
		if err := cg.generateControllerClient(ctrl, config); err != nil {
			return err
		}
	}

	// 生成类型定义
	return cg.generateTypes(config)
}

// generateBaseClient 生成基础客户端
func (cg *ClientGenerator) generateBaseClient(config ClientConfig) error {
	tmpl := `// Code generated by ClientGenerator. DO NOT EDIT.
package {{.PackageName}}

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// Client API客户端
type Client struct {
	BaseURL    string
	HTTPClient *http.Client
	Headers    map[string]string
{{range .Controllers}}
	{{.Name}} *{{.Name}}Client
{{end}}
}

// NewClient 创建新的API客户端
func NewClient(baseURL string) *Client {
	if baseURL == "" {
		baseURL = "{{.BaseURL}}"
	}

	client := &Client{
		BaseURL: strings.TrimRight(baseURL, "/"),
		HTTPClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		Headers: make(map[string]string),
	}

{{range .Controllers}}
	client.{{.Name}} = New{{.Name}}Client(client)
{{end}}

	return client
}

// SetHeader 设置请求头
func (c *Client) SetHeader(key, value string) {
	c.Headers[key] = value
}

// SetTimeout 设置超时时间
func (c *Client) SetTimeout(timeout time.Duration) {
	c.HTTPClient.Timeout = timeout
}

// Request 发送HTTP请求
func (c *Client) Request(method, path string, body interface{}, result interface{}) error {
	url := c.BaseURL + path

	var reqBody io.Reader
	if body != nil {
		jsonData, err := json.Marshal(body)
		if err != nil {
			return fmt.Errorf("序列化请求体失败: %v", err)
		}
		reqBody = bytes.NewBuffer(jsonData)
	}

	req, err := http.NewRequest(method, url, reqBody)
	if err != nil {
		return fmt.Errorf("创建请求失败: %v", err)
	}

	// 设置请求头
	req.Header.Set("Content-Type", "application/json")
	for key, value := range c.Headers {
		req.Header.Set(key, value)
	}

	// 发送请求
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return fmt.Errorf("发送请求失败: %v", err)
	}
	defer resp.Body.Close()

	// 读取响应
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("读取响应失败: %v", err)
	}

	// 检查状态码
	if resp.StatusCode >= 400 {
		return fmt.Errorf("请求失败: %d %s", resp.StatusCode, string(respBody))
	}

	// 解析响应
	if result != nil {
		if err := json.Unmarshal(respBody, result); err != nil {
			return fmt.Errorf("解析响应失败: %v", err)
		}
	}

	return nil
}

// Get 发送GET请求
func (c *Client) Get(path string, params map[string]string, result interface{}) error {
	if len(params) > 0 {
		values := url.Values{}
		for k, v := range params {
			values.Add(k, v)
		}
		path += "?" + values.Encode()
	}
	return c.Request("GET", path, nil, result)
}

// Post 发送POST请求
func (c *Client) Post(path string, body interface{}, result interface{}) error {
	return c.Request("POST", path, body, result)
}

// Put 发送PUT请求
func (c *Client) Put(path string, body interface{}, result interface{}) error {
	return c.Request("PUT", path, body, result)
}

// Delete 发送DELETE请求
func (c *Client) Delete(path string, result interface{}) error {
	return c.Request("DELETE", path, nil, result)
}
`

	t, err := template.New("client").Parse(tmpl)
	if err != nil {
		return err
	}

	outputDir := filepath.Join(cg.ProjectRoot, cg.OutputDir)
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		return err
	}

	file, err := os.Create(filepath.Join(outputDir, "client.go"))
	if err != nil {
		return err
	}
	defer file.Close()

	return t.Execute(file, config)
}

// generateControllerClient 生成控制器客户端
func (cg *ClientGenerator) generateControllerClient(ctrl ControllerInfo, config ClientConfig) error {
	tmpl := `// Code generated by ClientGenerator. DO NOT EDIT.
package {{.PackageName}}

import (
	"fmt"
)

// {{.Controller.Name}}Client {{.Controller.Name}}控制器客户端
type {{.Controller.Name}}Client struct {
	client *Client
}

// New{{.Controller.Name}}Client 创建{{.Controller.Name}}客户端
func New{{.Controller.Name}}Client(client *Client) *{{.Controller.Name}}Client {
	return &{{.Controller.Name}}Client{
		client: client,
	}
}

{{range .Controller.Methods}}
// {{.Name}} {{.Comment}}
func (c *{{$.Controller.Name}}Client) {{.Name}}({{range $i, $param := .Params}}{{if ne $i 0}}, {{end}}{{$param.Name}} {{$param.Type}}{{end}}) error {
	{{if eq .HTTPMethod "GET"}}
	params := map[string]string{
		{{range .Params}}
		{{if and (ne .Name "ctx") (ne .Name "c")}}
		"{{.Name}}": fmt.Sprintf("%v", {{.Name}}),
		{{end}}
		{{end}}
	}
	return c.client.Get("{{$.Controller.Prefix}}{{.Path}}", params, nil)
	{{else}}
	body := map[string]interface{}{
		{{range .Params}}
		{{if and (ne .Name "ctx") (ne .Name "c")}}
		"{{.Name}}": {{.Name}},
		{{end}}
		{{end}}
	}
	return c.client.{{.HTTPMethod | title}}("{{$.Controller.Prefix}}{{.Path}}", body, nil)
	{{end}}
}
{{end}}
`

	funcMap := template.FuncMap{
		"title": strings.Title,
	}

	t, err := template.New("controller").Funcs(funcMap).Parse(tmpl)
	if err != nil {
		return err
	}

	outputDir := filepath.Join(cg.ProjectRoot, cg.OutputDir)
	file, err := os.Create(filepath.Join(outputDir, strings.ToLower(ctrl.Name)+"_client.go"))
	if err != nil {
		return err
	}
	defer file.Close()

	data := struct {
		PackageName string
		Controller  ControllerInfo
	}{
		PackageName: config.PackageName,
		Controller:  ctrl,
	}

	return t.Execute(file, data)
}

// generateTypes 生成类型定义
func (cg *ClientGenerator) generateTypes(config ClientConfig) error {
	tmpl := `// Code generated by ClientGenerator. DO NOT EDIT.
package {{.PackageName}}

// Response 通用响应结构
type Response struct {
	Code    int         ` + "`json:\"code\"`" + `
	Message string      ` + "`json:\"message\"`" + `
	Data    interface{} ` + "`json:\"data\"`" + `
}

// Error 错误响应
type Error struct {
	Code    int    ` + "`json:\"code\"`" + `
	Message string ` + "`json:\"message\"`" + `
}

func (e *Error) Error() string {
	return e.Message
}

// 控制器相关类型定义
{{range .Controllers}}
{{range .Methods}}
{{if .Params}}
// {{$.Name}}{{.Name}}Request {{$.Name}}.{{.Name}} 请求参数
type {{$.Name}}{{.Name}}Request struct {
	{{range .Params}}
	{{if and (ne .Name "ctx") (ne .Name "c")}}
	{{.Name | title}} {{.Type}} ` + "`json:\"{{.Name}}\"`" + `
	{{end}}
	{{end}}
}
{{end}}
{{end}}
{{end}}
`

	funcMap := template.FuncMap{
		"title": strings.Title,
	}

	t, err := template.New("types").Funcs(funcMap).Parse(tmpl)
	if err != nil {
		return err
	}

	outputDir := filepath.Join(cg.ProjectRoot, cg.OutputDir)
	file, err := os.Create(filepath.Join(outputDir, "types.go"))
	if err != nil {
		return err
	}
	defer file.Close()

	return t.Execute(file, config)
}
